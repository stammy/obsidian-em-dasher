/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EmDasherPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function editorHasCm5(editor) {
  const cm = editor.cm;
  return typeof cm === "object" && cm !== null && typeof cm.getTokenAt === "function";
}
var EmDasherPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.handleEditorChange = (editor, markdownView) => {
      const cursorPos = editor.getCursor();
      const line = editor.getLine(cursorPos.line);
      if (cursorPos.ch < 3) {
        return;
      }
      const charJustTyped = line.charAt(cursorPos.ch - 1);
      const twoCharsBefore = line.substring(cursorPos.ch - 3, cursorPos.ch - 1);
      if (charJustTyped === " ") {
        if (twoCharsBefore === "--") {
          const charBeforePairIndex = cursorPos.ch - 4;
          if (charBeforePairIndex < 0 || line.charAt(charBeforePairIndex) !== "-") {
            const contextCheckPos = {
              line: cursorPos.line,
              ch: cursorPos.ch - 1
            };
            const textContextBeforeDash = line.substring(0, cursorPos.ch - 3);
            const contextPosBeforeDash = {
              line: cursorPos.line,
              ch: cursorPos.ch - 3
            };
            if (!this.isInsideCodeBlock(editor, contextCheckPos) && !this.isInsideUrl(
              textContextBeforeDash,
              editor,
              contextPosBeforeDash
            )) {
              editor.replaceRange(
                "\u2014",
                // Replace with em-dash
                { line: cursorPos.line, ch: cursorPos.ch - 3 },
                // Start of "--"
                { line: cursorPos.line, ch: cursorPos.ch - 1 }
                // End of "--"
              );
            }
          }
        }
      }
    };
  }
  async onload() {
    this.app.workspace.on("editor-change", this.handleEditorChange);
  }
  async onunload() {
    this.app.workspace.off("editor-change", this.handleEditorChange);
  }
  isInsideCodeBlock(editor, cursorPos) {
    for (let i = Math.max(0, cursorPos.line - 10); i <= cursorPos.line; i++) {
      const lineText = editor.getLine(i);
      if (lineText.trim().startsWith("```")) {
        let inBlock = false;
        for (let j = 0; j < i; j++) {
          if (editor.getLine(j).trim().startsWith("```")) {
            inBlock = !inBlock;
          }
        }
        if (editor.getLine(i).trim().startsWith("```")) {
          inBlock = !inBlock;
        }
        if (inBlock) {
          let blockStillOpen = true;
          for (let k = i + 1; k <= cursorPos.line; k++) {
            if (editor.getLine(k).trim().startsWith("```")) {
              blockStillOpen = false;
              if (k === cursorPos.line && editor.getLine(k).indexOf("```") > cursorPos.ch) {
                blockStillOpen = true;
              }
            }
          }
          if (blockStillOpen && cursorPos.line >= i) {
            if (cursorPos.line === i && // cursorPos.ch is the second dash. indexOf("```") + 2 is end of ```
            cursorPos.ch <= editor.getLine(i).indexOf("```") + 2) {
            } else {
              return true;
            }
          }
        }
      }
    }
    if (editor.getLine(cursorPos.line).trim().startsWith("```") && cursorPos.ch > editor.getLine(cursorPos.line).indexOf("```")) {
      let openFences = 0;
      for (let l = 0; l <= cursorPos.line; l++) {
        if (editor.getLine(l).trim().startsWith("```")) {
          openFences++;
        }
      }
      if (openFences % 2 !== 0)
        return true;
    }
    if (editorHasCm5(editor)) {
      const cm5Editor = editor.cm;
      const tokenAtSecondDash = cm5Editor.getTokenAt(cursorPos, true);
      if (tokenAtSecondDash && tokenAtSecondDash.type && tokenAtSecondDash.type.includes("code") && tokenAtSecondDash.type.includes("inline")) {
        if (tokenAtSecondDash.start <= cursorPos.ch - 1) {
          return true;
        }
      }
    }
    const currentLine = editor.getLine(cursorPos.line);
    let backtickCount = 0;
    for (let i = 0; i < cursorPos.ch - 1; i++) {
      if (currentLine[i] === "`") {
        backtickCount++;
      }
    }
    if (backtickCount % 2 !== 0) {
      if (currentLine.substring(cursorPos.ch + 1).includes("`")) {
        return true;
      }
    }
    return false;
  }
  isInsideUrl(textBeforeDash, editor, cursorPos) {
    const currentLine = editor.getLine(cursorPos.line);
    const textAfterDash = currentLine.substring(cursorPos.ch);
    const fullPotentialUrl = textBeforeDash + "--" + textAfterDash.split(/[\s()\[\]]/)[0];
    const urlPattern = /((?:https?|ftp):\/\/(?:[\w\-]+\.)+[\w\-]+(?:[\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?)/i;
    if (urlPattern.test(fullPotentialUrl)) {
      const match = fullPotentialUrl.match(urlPattern);
      if (match && match[0].includes("--")) {
        const urlStartIndex = currentLine.indexOf(match[0]);
        if (urlStartIndex === -1)
          return false;
        const urlEndIndex = urlStartIndex + match[0].length;
        if (cursorPos.ch > urlStartIndex && cursorPos.ch <= urlEndIndex) {
          const partOfUrlBeforeCursor = match[0].substring(
            0,
            cursorPos.ch - urlStartIndex - 2
          );
          const hostAndPath = match[0].replace(/^((?:https?|ftp):\/\/)/i, "");
          const host = hostAndPath.split("/")[0];
          if (host.includes("--")) {
            const potentialHostPartInLine = textBeforeDash.substring(
              textBeforeDash.toLowerCase().indexOf(host.toLowerCase())
            );
            if (potentialHostPartInLine.length <= host.length) {
              return true;
            }
          }
          return true;
        }
      }
    }
    return false;
  }
};
